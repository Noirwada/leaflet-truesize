!function(a,b){typeof exports==='object'&&typeof module!=='undefined'?b(require('leaflet')):typeof define==='function'&&define.amd?define(['leaflet'],b):(b(a.L))}(this,(function(a){'use strict';a=a&&a.hasOwnProperty('default')?a['default']:a;var b=6371008.8,c={meters:b,metres:b,millimeters:b*1000,millimetres:b*1000,centimeters:b*100,centimetres:b*100,kilometers:b/1000,kilometres:b/1000,miles:b/1609.344,nauticalmiles:b/1852,inches:b*39.370,yards:b/1.0936,feet:b*3.28084,radians:1,degrees:b/111325};function d(a,b,c){c=c||{};if(!k(c))throw new Error('options is invalid');var d=c.bbox,e=c.id;if(a===undefined)throw new Error('geometry is required');if(b&&b.constructor!==Object)throw new Error('properties must be an Object');d&&l(d);e&&m(e);var f={type:'Feature'};e&&(f.id=e);d&&(f.bbox=d);f.properties=b||{};f.geometry=a;return f}function e(a,b,c){if(!a)throw new Error('coordinates is required');if(!Array.isArray(a))throw new Error('coordinates must be an Array');if(a.length<2)throw new Error('coordinates must be at least 2 numbers long');if(!j(a[0])||!j(a[1]))throw new Error('coordinates must contain numbers');return d({type:'Point',coordinates:a},b,c)}function f(a,b){if(a===undefined||a===null)throw new Error('radians is required');if(b&&typeof b!=='string')throw new Error('units must be a string');var d=c[b||'kilometers'];if(!d)throw new Error(b+' units is invalid');return a*d}function g(a,b){if(a===undefined||a===null)throw new Error('distance is required');if(b&&typeof b!=='string')throw new Error('units must be a string');var d=c[b||'kilometers'];if(!d)throw new Error(b+' units is invalid');return a/d}function h(a){if(a===null||a===undefined)throw new Error('radians is required');var b=a%(2*Math.PI);return b*180/Math.PI}function i(a){if(a===null||a===undefined)throw new Error('degrees is required');var b=a%360;return b*Math.PI/180}function j(a){return!isNaN(a)&&a!==null&&!Array.isArray(a)}function k(a){return!!a&&a.constructor===Object}function l(a){if(!a)throw new Error('bbox is required');if(!Array.isArray(a))throw new Error('bbox must be an Array');if(a.length!==4&&a.length!==6)throw new Error('bbox must be an Array of 4 or 6 numbers');a.forEach(function(a){if(!j(a))throw new Error('bbox must only contain numbers')})}function m(a){if(!a)throw new Error('id is required');if(['string','number'].indexOf(typeof a)===-1)throw new Error('id must be a number or a string')}function n(a,b,c){if(a===null)return;var d,e,f,g,h,i,j,k=0,l=0,m,o=a.type,p=o==='FeatureCollection',q=o==='Feature',r=p?a.features.length:1;for(var s=0;s<r;s++){j=p?a.features[s].geometry:(q?a.geometry:a);m=j?j.type==='GeometryCollection':!1;h=m?j.geometries.length:1;for(var t=0;t<h;t++){var u=0,v=0;g=m?j.geometries[t]:j;if(g===null)continue;i=g.coordinates;var w=g.type;k=c&&(w==='Polygon'||w==='MultiPolygon')?1:0;switch(w){case null:break;case 'Point':if(b(i,l,s,u,v)===!1)return !1;l++;u++;break;case 'LineString':;case 'MultiPoint':for(d=0;d<i.length;d++){if(b(i[d],l,s,u,v)===!1)return !1;l++;w==='MultiPoint'&&u++};w==='LineString'&&u++;break;case 'Polygon':;case 'MultiLineString':for(d=0;d<i.length;d++){for(e=0;e<i[d].length-k;e++){if(b(i[d][e],l,s,u,v)===!1)return !1;l++}w==='MultiLineString'&&u++;w==='Polygon'&&v++};w==='Polygon'&&u++;break;case 'MultiPolygon':for(d=0;d<i.length;d++){w==='MultiPolygon'&&(v=0);for(e=0;e<i[d].length;e++){for(f=0;f<i[d][e].length-k;f++){if(b(i[d][e][f],l,s,u,v)===!1)return !1;l++}v++}u++};break;case 'GeometryCollection':for(d=0;d<g.geometries.length;d++)if(n(g.geometries[d],b,c)===!1)return !1;break;default:throw new Error('Unknown Geometry Type')}}}}function o(a){var b=[Infinity,Infinity,-Infinity,-Infinity];n(a,function(a){b[0]>a[0]&&(b[0]=a[0]);b[1]>a[1]&&(b[1]=a[1]);b[2]<a[0]&&(b[2]=a[0]);b[3]<a[1]&&(b[3]=a[1])});return b}function p(a,b){b=b||{};if(!k(b))throw new Error('options is invalid');var c=b.properties;if(!a)throw new Error('geojson is required');var d=o(a),f=(d[0]+d[2])/2,g=(d[1]+d[3])/2;return e([f,g],c)}function q(a){if(!a)throw new Error('coord is required');if(a.type==='Feature'&&a.geometry!==null&&a.geometry.type==='Point')return a.geometry.coordinates;if(a.type==='Point')return a.coordinates;if(Array.isArray(a)&&a.length>=2&&a[0].length===undefined&&a[1].length===undefined)return a;throw new Error('coord must be GeoJSON Point or an Array of numbers')}function r(a,b,c){c=c||{};if(!k(c))throw new Error('options is invalid');var d=c.final;if(d===!0)return s(a,b);var e=q(a),f=q(b),g=i(e[0]),j=i(f[0]),l=i(e[1]),m=i(f[1]),n=Math.sin(j-g)*Math.cos(m),o=Math.cos(l)*Math.sin(m)-Math.sin(l)*Math.cos(m)*Math.cos(j-g);return h(Math.atan2(n,o))}function s(a,b){var c=r(b,a);c=(c+180)%360;return c}function t(a,b,c){c=c||{};if(!k(c))throw new Error('options is invalid');var d=c.units,e=q(a),g=q(b),h=i((g[1]-e[1])),j=i((g[0]-e[0])),l=i(e[1]),m=i(g[1]),n=Math.pow(Math.sin(h/2),2)+Math.pow(Math.sin(j/2),2)*Math.cos(l)*Math.cos(m);return f(2*Math.atan2(Math.sqrt(n),Math.sqrt(1-n)),d)}function u(a,b,c,d){d=d||{};if(!k(d))throw new Error('options is invalid');var f=d.units,j=d.properties,l=q(a),m=i(l[0]),n=i(l[1]),o=i(c),p=g(b,f),r=Math.asin(Math.sin(n)*Math.cos(p)+Math.cos(n)*Math.sin(p)*Math.cos(o)),s=m+Math.atan2(Math.sin(o)*Math.sin(p)*Math.cos(n),Math.cos(p)-Math.sin(n)*Math.sin(r)),t=h(s),u=h(r);return e([t,u],j)}var v=0;a.TrueSize=a.Layer.extend({geoJSON:{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[]}},options:{style:{color:'#886699',weight:1,opacity:1,dashArray:"5, 10"}},initialize:function b(){var c=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.geoJSON,d=arguments[1],e=d?d.style:{},f=Object.assign(this.options.style,e),g={};g.style=f;a.Util.setOptions(this,g);this._initGeoJson(c,g)},_initGeoJson:function d(b,c){this._geoJSONLayer=a.geoJSON(b,c);this._currentId=v++},onAdd:function b(a){this._map=a;this._geoJSONLayer.addTo(this._map);this._makeDraggable(this._geoJSONLayer._layers)},_makeDraggable:function c(b){var d=this,e=b[Object.keys(b)[0]],f=new a.Draggable(e._path);f.on('drag',function(a){return d._onDrag(a,e)}).enable()},_onDrag:function d(b,c){var e=a.point(b.originalEvent.clientX,b.originalEvent.clientY),f=this._map.containerPointToLatLng(e),g=[f.lng,f.lat],h=this._getBearingDistance(c);this._redraw(c,g,h)},_getBearingDistance:function b(a){var c=p(a.feature).geometry.coordinates;return a.feature.geometry.coordinates[0].map(function(a){var b=r(c,a),d=t(c,a,{units:'kilometers'});return{bearing:b,distance:d}})},_redraw:function d(a,b,c){var e=c.map(function(a){return u(b,a.distance,a.bearing,{units:'kilometers'}).geometry.coordinates}),f={"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[e]}};this._geoJSONLayer.clearLayers();this._geoJSONLayer.addData(f);this._makeDraggable(this._geoJSONLayer._layers)},onRemove:function b(a){this._map=a;this._map.removeLayer(this._geoJSONLayer)}});a.trueSize=function(b,c){return new a.TrueSize(b,c)}}))
//# sourceMappingURL=Leaflet.TrueSize.min.js.map
